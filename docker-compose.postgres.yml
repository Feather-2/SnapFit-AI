version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://snapifit:${POSTGRES_PASSWORD}@postgres:5432/snapifit
    env_file:
      - .env
    volumes:
      # 持久化上传文件
      - app_uploads:/app/public/uploads
      # 持久化日志文件
      - app_logs:/app/logs
    networks:
      - app_network
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=snapifit
      - POSTGRES_USER=snapifit
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snapifit -d snapifit"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # 数据库迁移服务
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://snapifit:${POSTGRES_PASSWORD}@postgres:5432/snapifit
    env_file:
      - .env
    networks:
      - app_network
    command: ["sh", "-c", "npx prisma generate && npx prisma db push && echo 'Database migrated'"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"  # 如果配置了HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl  # 如果配置了HTTPS
      - nginx_logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
